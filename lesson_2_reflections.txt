What happens when you initialize a repository? Why do you need to do it?
    
    A hidden .git directory is created storing metadata about a repository. 
    This metadata can be acessed using git commands after you start tracking files in your repository.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

    The staging are is a temporary storage area that you can add or remove
files from your working directory to it with the purpose of enabling tracking
and other version control operations on them. It's like a new layer on top of
your existing files in your working directory. Think of it as similar to
several word documents in a directory when you decide to enable tracking on
only few of them. This set of files would consist of the staging area in git.

How can you use the staging area to make sure you have one commit per logical
change?

    You can use git status and git diff to see the difference between your
working directoy and the staging area. If you notice a change that is more
than just a logical change you may skip git add it or if you already added it
you can git rm --cached filename to remove it from the staging area. 

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

    When diverging from the main project either with a new feature or a new
experimental feature or adding support for a new langiage for example it is a
good idea to create a new seperate branch and work on it independently without
affecting the main (master) branch. You can name your branches with some
meaningful names to make it easy to chekout different branches and perform
commits in them, one branch at a time.

How do the diagrams help you visualize the branch structure?

    Branches, using a term from the physical world, are best explained using
diagrams where you an clearly see the origin of branch or sequence of commits
in git, where you branch out to develop a new feature and where do you merge
or continue a seperate path on a new branch. A directed diagram also shows
unreachable commits and how they relate with other reachable commits and
branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result would consist of both features developed in both merged
branches unless the branches were formed several commits earlier. In that case
one branch will have an outdated version of the master branch. This problem
could be partially solved by merging it with the current updated master branch
but that is not always the case. Since branches have a visual representation,
using a similar diagram helps the developer visualize the commits leading to a
merge and all the way back to the origin/init commit.

What are the pros and cons of Git.s automatic merging vs. always doing merges
manually?
    
    Automatic merging can help us with some trivial chores like including a
brand new module or function in the merged result. This would take some time
to perform manually. Automatic merging can include some inconsistent code
though so very careful inspection is needed before any commits. Code execution
is not just about lines in a file, they have a special meaning that could
break during an automatic merge.
